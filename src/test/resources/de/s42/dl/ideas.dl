
// https://github.com/studio42gmbh/dl/issues/33
// Transform types

type A {
	String name;
	long coins;
}

type B {
	String description;
	int amount;
}

type C {
	String log;
}

transform A to B {
	assert $A.name != null;
	assert $A.coins >= 0;	
	description : $A.name + " " + $A.coins;
	amount : $A.coins * 1000;
}

transform B to C {
	log : "description: " + $B.description + ", amount: " + $A.amount;
}

// can this be infered automatically?
transform A -> C : A->B, B->C;


// TRANSFORM DATA
// see also https://github.com/antlr/antlr4/blob/master/doc/tree-matching.md
// and https://github.com/antlr/antlr4/blob/master/tool-testsuite/test/org/antlr/v4/test/tool/TestXPath.java

// Data

NodeRoot a {
	
	NodeFolder {
		
		NodeR deep {
			NodeA {}	
			NodeB {}
		}
	}
	
	NodeR first {
		NodeB b {}
		NodeA c {}	
	}

	NodeR {
		NodeA {}
	}

	NodeR other {}
}

// Transform target
NodeR t i <- $.?<NodeR> {
	NodeB x <- $i.?<NodeB>  {
		NodeA y  <- $i.?<NodeA> {}
	}
}

// Apply
Object r : $t(a);

//r =

NodeRoot a {
	
	NodeFolder {
		
		NodeR deep {
			NodeB {
				NodeA {}	
			}
		}
	}
	
	NodeR first {
		NodeB b {
			NodeA c {}	
		}
	}

	NodeR {
		NodeA {}
	}

	NodeR other {}
}


// LOG FOR DEBUG

pragma logTrace("Stuff");
pragma logDebug("Stuff");
pragma logInfo("Stuff");
pragma logWarn("Stuff");
pragma logError("Stuff");


// PATTERN MATCHING IN #...
// Would allow to resolve complex data from current data set

Array<String> filtered : #<Poject,Folder>[.*Naur.*].?name;


// TUPLE, VARIANT ... SUMTYPES, PRODUCTTYPES

Tuple<String, Integer, Integer> tuple : "Hi", 42, 24;

type MyVariant extends Variant<String, Integer>;

Variant<String, Integer> variant : 42;
MyVariant var : "Hallo";


// KEYWORD EXPORT
// export should be a keyword for types, annotations and instances ...

export type T {}

export T data {}

// BYTE STRUCTURE ANNOTATION

Type Data			@binary(id : 1, size : 1, endianess : big)
{
	Int count		@binary(ordinal : 0, size : 4);
	String display	@binary(ordinal : 1, size : 4);
}

//Will lead to:
// ||





// MAKE SEMICOLON OPTIONAL?
// Do i like that?


// DATA TEMPLATES WITH "OPEN" REFS
// How can i preparse a DL file and then create context afterwards? I.E. A ref that will determine the target of a component

Window w {
	title : "Display" + #element.display;
}

// How to handle that in Java? in toJavaObject(Context context) ?


// ARRAY TYPES?
// Do i want that?

type T 
{
	int[] i;
}


// TYPECASTS
// Doesn't this work already?

type Point 
{
	int x;
	int y;
}

type Dimension 
{
	int width;
	int height;
}

type Rectangle extends Dimension, Point;

Rectangle r;

Point p : $r;


// OPTIONAL ? PATH FOR $ REFS
// Allows to return empty if the given path element was not found and traverse further otherwise

int x : $other?.sub?.x?


// DL MISSION:
// DL provides environment dependable constraining and validation of data in a consistent and foremost easy readable and understandable language to describe data and stream data
// (types, generics, annotations/contracts, scope, streamable)


// DL 1.0 in  a nutshell (not there yet)

require libA;
require "other.dl";

extern pragma de.s42.util.Log alias Log;
extern type de.s42.dom.Entity alias Entity;

pragma Log(INFO, "Starting parsing");

abstract type Shape extends Entity;

type SpecialInt @range(min : -10000, max : 10000) extends int; 

final type Rectangle(x, y, width, height) extends Shape
{
	SpecialInt x : 0;
	SpecialInt y : 0;
	SpecialInt width @min(1) @required;
	SpecialInt height @min(1) @required;
}

enum State 
{
	DRAFT, REVIEW, PRODUCTION
}

declare type Shapes;

type App contains Shapes
{
}

type Shapes @contain(Shape, 1, 10) contains Shape
{
	App app @required
	State state @required;
}

pragma disableDefineTypes;

int SCALE : 3;

App app @export;

Rectangle rect : 10, 10, 200, 100;

Rectangle rect2 {
	width : 32;
	height : 32;
}

Shapes rectangles in app {

	app : $app;
	state : REVIEW;

	Rectangle rect3 {
		x : $rect.x - 100;
		y : $rect.x - (0xFF * 2);
		width : $rect.width * $SCALE;
		height : $rect.height * $SCALE;
	}
		
	Rectangle rect4 {
		width : 32;
		height : 16;
	}

	Rectangle rect5 : copy $rect2;
}








// TYPE ASSIGNMENT DEFINITION
// Allows to define how a type can get constructed from a simple assignment

type Rectangle(x, y, width, height) extends Shape
{
	int x : 0;
	int y : 0;
	int width @min(1) : 1;
	int height @min(1) : 1;
}

// Allows this assignment
Rectangle rect : 10, 10, 200, 100;





// TYPE GENERICS

type T<U> 
{
	U y @required;
	U z;
}


// WAY TO DEFINE SIMPLE TYPES IN DL
// How could i define a constrained Float within DL but adding annotations?

type Percentage extends float
{
	float value @required @range(0.0, 100.0);
}

Percentage g : 95.0;

type T 
{
	Percentage p : 95.0;
	float other : $g;
}


// WAY TO APPLY ANNOTATIONS ON ALL ATTRIBUTES IN TYPE?
// use @@ ?

@forall(int, min(0))
@forall _ : @reqired 
@@<int .*>(min(0))

// Applies required to all ints in this type
type T
@@<int .*>(required)
{
	String s;
	int x; // <- required
	int y; // <- required
}

// KOMBINATORISCHES ANNOTATION/CONTRACT FRAMEWORK - mit EI besprechen
// -> annotation auf type die auf selection attributes in type angewendet werden
// -> combined annotations


annotation combined : hasJustSimpleMembers & isComplex & !isDerived & ( match(name, "R.*") | match(name, "G.*") );


annotation combined : hasJustSimpleMembers & isComplex & !isDerived;
annotation combined { hasJustSimpleMembers & isComplex & !isDerived }

so in der art bzw.

annotation combined(int min, int max) { hasJustSimpleMembers(min, max) & isComplex & !isDerived }
annotation combined(int min, int max, type t) { hasJustSimpleMembers(min, max) & isComplex & !isDerived & hasmemberoftypewithname(t.x) & hasmemberoftypewithname(t.y)  }

// @prime means the number is a integer/long/short and is a primenumber
extern annotation prime @customType; // currently has to be pulled from implementing environment (i.e. java)

annotation typeOf(var, type) : @assert(typeOf($var) == $type);

annotation tlike : 
	@typeOf(y, Number) & 
	@typeOf(z, Number) & 
	@assert(typeOf(y) == typeOf(z)) & 
	@assert(y == z + 1);

type T
@export{client}
@tlike{!client|windows}
extends Object, MathObject
{
	String x @required;
	int y @prime : 42 * 3 - 5;
	int z @requiredIf(y > 2);
}

type T2
@isTlike
{
	double y;
	float z; // <- ERROR: type is different to y type
}


// ADD GENERICS IN DL

type T<U,V> 
{
	Map<U, V> data;
}


// SCOPE FOR KEYWORDS

type{editor} User {
	
}


// SCOPES
// scopes could be OS(windows, linux, macos), App(client, server), Runmode (release, debug, testing)
// scopes can be used with bool operators !, |, &

scope editor {

...

}


// SCOPED ANNOTATIONS
// allow to have annotations just be used in certain environments/scopes (scopes 'all' and 'none'(?) are inbuilt)
// scopes could be OS(windows, linux, macos), App(client, server), Runmode (release, debug, testing)
// over time DL will provide a rich set of standardized scopes
// scopes can be used with bool operators !, |, &


@disallowComponent(DebugComponent):server&release

@{server&release}disallowComponent(DebugComponent)


type Node 
@requireComponent(FinalRenderComponent, 1, 1) // equivalent to @all:requireComponent(FinalRenderComponent, 1, 1)
@disallowComponent(DebugComponent):server&release
@disallowComponent(DebugComponent):server
@disallowComponent(EditorComponent):!editor
@requireComponent(EditorComponent, 1, 1):editor|batch
{
}

// DEFINE/COMBINE ANNOTATION IN DL

// allow to combine other annotations into my own like a specific contract
annotation lowerCaseKeyword5t10 (required & length(5, 10)) & !upperCase;

type User {
	
	UUID hrid @myKeyword;

	UUID hrid2 @required @length(5, 10) @lowerCase;
}

// COMPOSED ANNOTATIONS (well covered with abstract types as mixin
// abstract type @symbol @length(4, 255);

annotation myVariableName extends symbol, length(4, 255);
annotation myVariableName(max) extends symbol, length(4, max);


// CONTRACTS 
// perhaps just refactoring of annotations or extension?
// like annotations that ensure contracts providing bool nature and composition

extern contract noComplexAttributes;
extern contract noUndefinedValues;
contract myStruct 
	(noComplexAttributes 
	and noUndefinedValues  // and == &
	and (not ...)) or // or == |


// BINARY VERSION

extern type UUID;

BeginModule
DefineSymbol		id:1 string:UUID
DefineExternType	name:1
EndModule


type User {
	
	UUID id @required;
}

BeginModule
DefineSymbol			id:1 string:User
BeginDefineType			name:1
DefineSymbol			id:2 string:UUID
DefineSymbol			id:3 string:id
BeginDefineAttribute	type:2 name:3
DefineSymbol			id:4 string:required
DefineAnnotation		type:4
EndDefineAttribute
EndModule


type User @dynamic {
	
	String login @required @length(4, 120) : "Default";
	UUID id @generateUUID @required @unique;
}

BeginModule
DefineSymbol			id:1 string:User
BeginDefineType			name:1
DefineSymbol			id:2 string:dynamic 
DefineAnnotation		type:2
DefineSymbol			id:3 string:String
DefineSymbol			id:4 string:login
BeginDefineAttribute	type:3 name:4
DefineSymbol			id:5 string:required
DefineAnnotation		type:5
DefineSymbol			id:6 string:length
BeginDefineAnnotation	type:6
DefineValue				dataType:int value:4
DefineValue				dataType:int value:120
DefineSimpleDefaultValue dataType:String value:Default
EndDefineAnnotation
EndDefineAttribute
DefineSymbol			id:7 string:UUID
DefineSymbol			id:8 string:id
BeginDefineAttribute	type:7 name:8
DefineSymbol			id:9 string:generateUUID
DefineAnnotation		type:9
DefineAnnotation		type:5
DefineSymbol			id:10 string:unique
DefineAnnotation		type:10
EndDefineAttribute
EndModule



// Example for optimal compact data sending
// happened before in def section:
// DefineSymbol			id:1 string:User
// DefineSymbol			id:2 string:login
// DefineSymbol			id:3 string:id
// would be great if binary could encode uuids as 128bit - 16b

User a {
	login : "Arthur";
	id : "ad332384-4a04-4119-9e95-4753f31e3b09";
}

User b {
	login : "Arthur2";
	id : "ab332384-4a04-4119-9e95-4753f31e3b09";
}

(0000) BeginInstance			type:1 name:a (size:1)
(0004) SetStringAttribute		name:2 value:Arthur (size:6)
(0013) SetBinaryAttribute		name:3 value:ad33 2384 4a04 4119 9e95 4753 f31e 3b09 (size:16)
(0032) BeginInstance			type:1 name:b (size:1)
(0036) SetStringAttribute		name:2 value:Arthur2 (size:7)
(0046) SetBinaryAttribute		name:3 value:ab33 2384 4a04 4119 9e95 4753 f31e 3b09 (size:16)
(0065) 

// Id elements: 18
// Optimal size compacted ids - optional:	 65b
// Size ids padded dword:					119b
// Ascii pretty print:						154b
// Ascii min:								131b



// NAMESPACES (for scoping types, instances, etc. in modules or across modules)

namespace mqrc {

	type A 
	{
		String test;
	}
}

--

use mqrc;

A test { test : "aha"; }

unuse mqrc;

//or:

namespace mqrc {

	A test { test : "aha"; }

}


// DEFINE OR TYPES IN TYPE DEF (SORT OF AN INSTA UNION)

type GPImage extends Image { 
	Material|Shader|Texture material;
}


// COLOR CODING IN NETBEANS


// GENERATE STUB CODE FROM TYPE DEFINITION

type de.s42.mq.i18n.LocalizedStringData @java extends StringData
{
	String id @required;
	de.s42.mq.i18n.L10N l10n @required;
	String value @readonly;
}

// EXTEND LEAVING TYPE UNCHANGED (ALSO VALIDATING IF SUBTYPE CONTRADICTS TYPE)

type GPImage extends Image { 
	material : $assets.imageMaterial; // -> Is Material
}

// MULTIPLE INSTANCE NAMES AND ATTRIBUTE ASSIGNMENT

String a, b, c : "Test"; 

Mesh mesh, mesh2 {
	position, scale, rotation : 0.0;
}


// ALIAS FOR ENUMS

enum Gender {
	notset|undefined|0, 
	male|m|1, 
	female|f|2, 
	other|o|3
}


// ACTIONS
// do i really want that or better not? makes DL from a data language a more ANT like dialect
// how will the execution modell work - is it not better to provide a set of default instances like TaskManager, Tasks and Task?

pragma disableDefineActions; // define no more new actions
pragma disableActions; // dont execute actions

extern action doStuff;

action doStuff @java("de.s42.my.actions.MyStuffAction") {
	int count @required;
	String text @required : "Text";
	String another;
}

//allow to create action presets by deriving
action doMyStuff extends doStuff {
	int count : 3;
	String text : "My";
	String another : "OK";
}

// leave 2 defaulted
doStuff(1);

// leave optional away
doStuff(1, "two");

// call with named parameters
doStuff({ 
	count : 1;
	another :  $three;
	text : "two";
})


// ARCHIVE ARCHIVE ARCHIVE ARCHIVE ARCHIVE
// ARCHIVE ARCHIVE ARCHIVE ARCHIVE ARCHIVE
// ARCHIVE ARCHIVE ARCHIVE ARCHIVE ARCHIVE
// ARCHIVE ARCHIVE ARCHIVE ARCHIVE ARCHIVE

// CUSTOM TYPE JAVA IMPLEMENTATIONS -> now in place with extern type ...

//type Str @javaType("de.s42.dl.types.StringDLType");
//Str test : "Hallo";



// https://github.com/studio42gmbh/dl/issues/20 BOOLEAN/NUMERICAL TERMS IN ASSIGNMENTS (could also help in the combined annotations)

// new - shorter and results in "native" boolean - also consider stativ vs. dynamic (with $refs) terms
boolean b	: ($state & $state2) | (true != !$state3);
boolean b2	: 7 != 6;
boolean b3	: 7 != $val;
int i		: 5 * 3 + 2;
int i2		: 5 * $val2 - 2;

// currently possible with DL - own type tree BoolT, Or, And, Bool, Not, Xor, True, False
BoolT b : Or { 
	And { 
		Bool { value : $state; }
		Bool { value : $state2; } 
	} 
	Xor { 
		True {}
		Not { value : $state3; } 
	}
};

// Or special Eval with subparser ... might also use ANTLR ...
Eval var : Eval { expr : "$0 != $1", data : $a, $b; };
Eval var : Eval { expr : "7 != $ref"; };


// Potential grammar extension in DLParser.g4 and DLLexer.g4

expression
   : expression ( AND | OR | XOR ) expression
   | NOT expression 
   | expression POW expression
   | expression ( MUL | DIV ) expression
   | expression ( PLUS | MINUS ) expression
   | PARENTHESES_OPEN expression PARENTHESES_CLOSE
   | ( PLUS | MINUS )* atom ;

atom : FLOAT_LITERAL | INTEGER_LITERAL | BOOLEAN_LITERAL | REF;

NOT : '!' ;
AND : '&' ;
OR : '|' ;
XOR : '!=' ;
PLUS : '+' ;
MINUS : '-' ;
MUL : '*' ;
DIV : '/' ;
POW : '^' ;


// ALIAS INSTANCE NAMES

Mesh mesh|m { // done
	...
}

// DONE AUTO TYPE -> NO PARAMS FOR JAVA ANNOTATION

type de.s42.mq.i18n.LocalizedStringData @java extends StringData
{
	String id @required;
	de.s42.mq.i18n.L10N l10n @required;
	String value @readonly;
}


// DONE DEFINE REQUIREOR A, B @requiredOr(other attributes)

type de.s42.mq.ui.Image @java(de.s42.mq.ui.Image) extends Quad
{
	Path source @requiredOr(texture, ...); //?
	Texture texture @requiredOr(source, ...);
	boolean correctAspectRatio : true;
}


// DONE ALIAS TYPE DEFINITION

type Integer|Int|int {} // done

extern type Integer|Int|int; // dont like that!


// DONE PRAGMA - I.E. SEAL NO NEW TYPES

pragma noNewTypes // done
pragma noNewAnnotations // done
pragma noNewEnums // -> equal to noNewTypes
pragma <customPragma> // <- Java API that allows to define own pragmas? done


// 2020-11-08

// how to express reference vs. contained sub object?

// core.dl

extern annotation unique;
extern annotation secure;
extern annotation required;
extern annotation persist;
extern annotation generate;

extern type UUID;
extern type String;

enum UserLevel 
{
	Beginner, 
	Intermediate, 
	Professional,
}

abstract type Secure @secure;

abstract type Entity @persist 
{
	UUID id @generate @required @unique;
}

// user.dl

require core.dl;

type Account extends Entity, Secure 
{
	String  name @required;
}

type User extends Entity, Secure 
{
	String login @required @unique;
	String password @secure;
	UserLevel level @required : Beginner;
	Account account @required;
}

// data.dl

require user.dl;

Account s42 {	
	name: "Studio 42"
}

//import another module
import "defaults.dl"
import base.dl

//define extern annotations -> has to be provided by environment before this statement - this ensures it is defined
extern annotation default;
extern annotation partial;
extern annotation seal;
extern annotation abstract;
extern annotation required;
extern annotation unique;
extern annotation mutate;
extern annotation symbol;
extern annotation length(min, max);
extern annotation generateUUID;

//composed annotations
annotation myVariableName extends symbol, length(4, 255);
annotation myVariableName(max) extends symbol, length(4, max);

// CONTRACTS -> like annotations that ensure contracts providing bool nature and composition
extern contract noComplexAttributes;
extern contract noUndefinedValues;
contract myStruct means 
	(noComplexAttributes 
	and noUndefinedValues  // and == &
	and not ...) or // or == |

alias AxeItem de.s42.sw.bm.items.axes.AxeItem;

//define extern types -> has to be provided by environment before this statement - this ensures it is defined
extern type Global;
extern type Integer|Int|int;
extern type UUID;

//force id to be defined as uuid in Global space
type Global @mutate @seal {	
	UUID id @required;
	String firstName @required @minLength(4) @maxLength(200);
	String lastName @required @minLength(4) @maxLength(200);
}

//define attribute id and seal -> Type UUID is implicity from Global mutation
id @seal: "5a1edc27-4225-4503-a9f8-96bd1772977b";

extern annotation minLength {
	int length @default;
}

extern annotation maxLength {
	int length @default;
}

//define simple instance -> allows for deduplication
String schiller|s { "Schiller" }

//define enum  type - supporting synonyms
enum Gender {
	notset|undefined|0, 
	male|m|1, 
	female|f|2, 
	other|o|3
}

//define entity type Person
type Person {
	UUID id @required @unique;
	String firstName @minLength(4) @maxLength(200);
	String lastName @minLength(4) @maxLength(200);
	Gender gender: notset;
}

//add attributes to certain type of entities
type Person @mutate {
	String street;
	String housNumber;
	String zipCode;
	String city;
	String country;
	String[] tags;
}

// make id default to random UUID
type Person @mutate {
	UUID id @generateUUID; //@question how can we ensure order -> generateUUID should be before required
	String country @required;
}

//ATTENTION: Once an instance is defined "completely"(@question) it can not be changed afterwards!

Person petra @partial {
	lastName: $s;
}

//define instance of entity Person and map as benjamin and Survius -> the mapped names have to be unique!
Person benjamin|Survius {
	id: "5a1edc27-4225-4503-a9f8-96bd1772977b";
	firstName: Benjamin;
	lastName: $petra.lastName;
	country: CZ;
	gender: m;
	tags: Ben,Player,Environment;
}

//finalizes the instance and makes it published - resolves circular reference issue (using data created by benjamin)
Person petra @mutate {
	country: $benjamin.country;
}

// HTML Demo

type H1 extends HTMLElement {
	String text @default: "";
}

//tree structure - nested instances - comma types are applied in order - undefined types are created as empty types!(?)
Div {
	H1, Jumbo pageTitle : "Welcome";
	P, JumboSubText : "Little text \nwith multiple lines";
	Input, VueInput, EmailInput newsletterSignup { placeholder: "Your email" }
}

/* compare to html
<div>
	<h1 id="pageTitle" class="Jumbo">Welcome</h1>
	<p class="JumboSubText">
		Little text<br>
		with multiple lines
	</p>
	<input id="newsletterSignup" class="VueInput,EmailInput" placeholder="Your email"/>
</div>
*/

/* lifecycles
 - before load
 - after load
 - after all resolved
 - after classes resolved
 - after refs resolved
*/

// UNION - logisch nicht binär - union sagt nur mind. 1 der attribute ist gesetzt! bzw. die Attribute sind equivalent in ihrer Semantik

union HouseNumber {
	int number;
	String place;
}

union Float4 {
	RGBA color;
	Vector4 vector;
}

//in implementierung gibt es eine optimierte weise abzufragen welcher typ es konkret ist