/*^ The MIT License
 * 
 * Copyright 2023 Studio 42 GmbH ( https://www.s42m.de ).
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */

require "dl:standard/base.dl";

// Define some combined contracts
annotation odd : !@even;
annotation range42 : @range(0, 42);
annotation evenRange42OrOdd : ( @range42 & @even ) | ( !@range42 & @odd );

// Special constrained base types
final type EvenLong42 @evenRange42OrOdd extends Long;

// Simple tree types
abstract type Node;
type Container extends Node contains Node;
type Root extends Container;

type Leaf 
// Make sure all type names start with an upprecase and dont contain underscores
@typeName(pattern : "[A-Z][^_]*")
// Make sure the variables all start with a lowercase and dont contain underscores
@attributeNames(pattern : "[a-z][^_]*")
extends Node;

final dynamic type Statistics extends Leaf
{
	EvenLong42 l42 @required;
	String version @required @length(min : 3, max : 10);
	Node node;
}

//^ Root root
Root root {
	Statistics stats {
		version : "1.0.0";
		l42 : 40;
		boolean state : false;
		node : Statistics {
			version : "0.1.0";
			l42 : 4;
			node : Statistics bottom {
				version : "0.2.0";
				l42 : 8;
			};
		};
	}
}
//^

boolean b : true & !(false | $root.stats.state);
String stat : $root.stats.node.node.l42 * 2 - 2;

assert $root.stats.node.node.version == "0.2.0" : "Expected 0.2.0 but got " + $root.stats.node.node.version;